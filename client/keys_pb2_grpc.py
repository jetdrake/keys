# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import keys_pb2 as keys__pb2


class KeyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamKeys = channel.stream_unary(
                '/keys.KeyService/StreamKeys',
                request_serializer=keys__pb2.KeyRequest.SerializeToString,
                response_deserializer=keys__pb2.KeyResponse.FromString,
                )
        self.StreamKeyEvents = channel.stream_unary(
                '/keys.KeyService/StreamKeyEvents',
                request_serializer=keys__pb2.KeyEvent.SerializeToString,
                response_deserializer=keys__pb2.KeyResponse.FromString,
                )
        self.PressKey = channel.unary_unary(
                '/keys.KeyService/PressKey',
                request_serializer=keys__pb2.KeyRequest.SerializeToString,
                response_deserializer=keys__pb2.KeyResponse.FromString,
                )
        self.ReleaseKey = channel.unary_unary(
                '/keys.KeyService/ReleaseKey',
                request_serializer=keys__pb2.KeyRequest.SerializeToString,
                response_deserializer=keys__pb2.KeyResponse.FromString,
                )


class KeyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamKeys(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamKeyEvents(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PressKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamKeys': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamKeys,
                    request_deserializer=keys__pb2.KeyRequest.FromString,
                    response_serializer=keys__pb2.KeyResponse.SerializeToString,
            ),
            'StreamKeyEvents': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamKeyEvents,
                    request_deserializer=keys__pb2.KeyEvent.FromString,
                    response_serializer=keys__pb2.KeyResponse.SerializeToString,
            ),
            'PressKey': grpc.unary_unary_rpc_method_handler(
                    servicer.PressKey,
                    request_deserializer=keys__pb2.KeyRequest.FromString,
                    response_serializer=keys__pb2.KeyResponse.SerializeToString,
            ),
            'ReleaseKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseKey,
                    request_deserializer=keys__pb2.KeyRequest.FromString,
                    response_serializer=keys__pb2.KeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'keys.KeyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamKeys(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/keys.KeyService/StreamKeys',
            keys__pb2.KeyRequest.SerializeToString,
            keys__pb2.KeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamKeyEvents(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/keys.KeyService/StreamKeyEvents',
            keys__pb2.KeyEvent.SerializeToString,
            keys__pb2.KeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PressKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keys.KeyService/PressKey',
            keys__pb2.KeyRequest.SerializeToString,
            keys__pb2.KeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keys.KeyService/ReleaseKey',
            keys__pb2.KeyRequest.SerializeToString,
            keys__pb2.KeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
